version: '3.8'

services:
    backend:
        build:
            context: .
            dockerfile: Dockerfile.backend
        ports:
            - '8080:8080'
        environment:
            - DATABASE_URL=${DATABASE_URL}
            - JWT_SECRET=${JWT_SECRET}
            - AUTH0_DOMAIN=${AUTH0_DOMAIN}
            - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
            - ENVIRONMENT=production
        depends_on:
            postgres:
                condition: service_healthy
        restart: unless-stopped

    frontend:
        build:
            context: .
            dockerfile: Dockerfile.frontend
        ports:
            - '80:80'
        environment:
            - VITE_AUTH0_DOMAIN=${AUTH0_DOMAIN}
            - VITE_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
            - VITE_AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
            - VITE_API_URL=${API_URL}
            - VITE_WEBSOCKET_URL=${WEBSOCKET_URL}
        depends_on:
            - backend
        restart: unless-stopped

    postgres:
        image: postgres:15-alpine
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}',
                ]
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

volumes:
    postgres_data:
