version: '3.8'

services:

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - GIN_MODE=${GIN_MODE:-release}
    depends_on:
      - postgres

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - VITE_AUTH0_CLIENT_ID=${VITE_AUTH0_CLIENT_ID:-your-client-id}
      - VITE_AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - VITE_API_URL=/api
    depends_on:
      - backend


    postgres:
        image: postgres:15-alpine
        environment:
            POSTGRES_DB: horse_tracking_db
            POSTGRES_USER: horsetracker
            POSTGRES_PASSWORD: R2,Y@B&wO46.Ln}Q
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test:
                ['CMD-SHELL', 'pg_isready -U horsetracker -d horse_tracking_db']
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

volumes:
    postgres_data:
