// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/polyfant/hulta_pregnancy_app/internal/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PregnancyRepository is an autogenerated mock type for the PregnancyRepository type
type PregnancyRepository struct {
	mock.Mock
}

// AddPreFoaling provides a mock function with given fields: ctx, sign
func (_m *PregnancyRepository) AddPreFoaling(ctx context.Context, sign *models.PreFoalingSign) error {
	ret := _m.Called(ctx, sign)

	if len(ret) == 0 {
		panic("no return value specified for AddPreFoaling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PreFoalingSign) error); ok {
		r0 = rf(ctx, sign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPreFoalingChecklistItem provides a mock function with given fields: ctx, item
func (_m *PregnancyRepository) AddPreFoalingChecklistItem(ctx context.Context, item *models.PreFoalingChecklistItem) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for AddPreFoalingChecklistItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PreFoalingChecklistItem) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPreFoalingSign provides a mock function with given fields: ctx, sign
func (_m *PregnancyRepository) AddPreFoalingSign(ctx context.Context, sign *models.PreFoalingSign) error {
	ret := _m.Called(ctx, sign)

	if len(ret) == 0 {
		panic("no return value specified for AddPreFoalingSign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PreFoalingSign) error); ok {
		r0 = rf(ctx, sign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPregnancyEvent provides a mock function with given fields: ctx, event
func (_m *PregnancyRepository) AddPregnancyEvent(ctx context.Context, event *models.PregnancyEvent) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for AddPregnancyEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PregnancyEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, pregnancy
func (_m *PregnancyRepository) Create(ctx context.Context, pregnancy *models.Pregnancy) error {
	ret := _m.Called(ctx, pregnancy)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Pregnancy) error); ok {
		r0 = rf(ctx, pregnancy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePreFoalingChecklistItem provides a mock function with given fields: ctx, itemID
func (_m *PregnancyRepository) DeletePreFoalingChecklistItem(ctx context.Context, itemID uint) error {
	ret := _m.Called(ctx, itemID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePreFoalingChecklistItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActive provides a mock function with given fields: ctx, userID
func (_m *PregnancyRepository) GetActive(ctx context.Context, userID string) ([]models.Pregnancy, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetActive")
	}

	var r0 []models.Pregnancy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Pregnancy, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Pregnancy); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Pregnancy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByHorseID provides a mock function with given fields: ctx, horseID
func (_m *PregnancyRepository) GetByHorseID(ctx context.Context, horseID uint) (*models.Pregnancy, error) {
	ret := _m.Called(ctx, horseID)

	if len(ret) == 0 {
		panic("no return value specified for GetByHorseID")
	}

	var r0 *models.Pregnancy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*models.Pregnancy, error)); ok {
		return rf(ctx, horseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Pregnancy); ok {
		r0 = rf(ctx, horseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pregnancy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, horseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *PregnancyRepository) GetByUserID(ctx context.Context, userID string) ([]models.Pregnancy, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []models.Pregnancy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Pregnancy, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Pregnancy); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Pregnancy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentPregnancy provides a mock function with given fields: ctx, horseID
func (_m *PregnancyRepository) GetCurrentPregnancy(ctx context.Context, horseID uint) (*models.Pregnancy, error) {
	ret := _m.Called(ctx, horseID)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentPregnancy")
	}

	var r0 *models.Pregnancy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*models.Pregnancy, error)); ok {
		return rf(ctx, horseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Pregnancy); ok {
		r0 = rf(ctx, horseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pregnancy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, horseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: ctx, horseID
func (_m *PregnancyRepository) GetEvents(ctx context.Context, horseID uint) ([]models.PregnancyEvent, error) {
	ret := _m.Called(ctx, horseID)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []models.PregnancyEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]models.PregnancyEvent, error)); ok {
		return rf(ctx, horseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []models.PregnancyEvent); ok {
		r0 = rf(ctx, horseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PregnancyEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, horseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreFoaling provides a mock function with given fields: ctx, horseID
func (_m *PregnancyRepository) GetPreFoaling(ctx context.Context, horseID uint) ([]models.PreFoalingSign, error) {
	ret := _m.Called(ctx, horseID)

	if len(ret) == 0 {
		panic("no return value specified for GetPreFoaling")
	}

	var r0 []models.PreFoalingSign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]models.PreFoalingSign, error)); ok {
		return rf(ctx, horseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []models.PreFoalingSign); ok {
		r0 = rf(ctx, horseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PreFoalingSign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, horseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreFoalingChecklist provides a mock function with given fields: ctx, horseID
func (_m *PregnancyRepository) GetPreFoalingChecklist(ctx context.Context, horseID uint) ([]models.PreFoalingChecklistItem, error) {
	ret := _m.Called(ctx, horseID)

	if len(ret) == 0 {
		panic("no return value specified for GetPreFoalingChecklist")
	}

	var r0 []models.PreFoalingChecklistItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]models.PreFoalingChecklistItem, error)); ok {
		return rf(ctx, horseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []models.PreFoalingChecklistItem); ok {
		r0 = rf(ctx, horseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PreFoalingChecklistItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, horseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreFoalingChecklistItem provides a mock function with given fields: ctx, itemID
func (_m *PregnancyRepository) GetPreFoalingChecklistItem(ctx context.Context, itemID uint) (*models.PreFoalingChecklistItem, error) {
	ret := _m.Called(ctx, itemID)

	if len(ret) == 0 {
		panic("no return value specified for GetPreFoalingChecklistItem")
	}

	var r0 *models.PreFoalingChecklistItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*models.PreFoalingChecklistItem, error)); ok {
		return rf(ctx, itemID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.PreFoalingChecklistItem); ok {
		r0 = rf(ctx, itemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PreFoalingChecklistItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreFoalingSigns provides a mock function with given fields: ctx, horseID
func (_m *PregnancyRepository) GetPreFoalingSigns(ctx context.Context, horseID uint) ([]models.PreFoalingSign, error) {
	ret := _m.Called(ctx, horseID)

	if len(ret) == 0 {
		panic("no return value specified for GetPreFoalingSigns")
	}

	var r0 []models.PreFoalingSign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]models.PreFoalingSign, error)); ok {
		return rf(ctx, horseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []models.PreFoalingSign); ok {
		r0 = rf(ctx, horseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PreFoalingSign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, horseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPregnancy provides a mock function with given fields: ctx, id
func (_m *PregnancyRepository) GetPregnancy(ctx context.Context, id uint) (*models.Pregnancy, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPregnancy")
	}

	var r0 *models.Pregnancy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*models.Pregnancy, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Pregnancy); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pregnancy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializePreFoalingChecklist provides a mock function with given fields: ctx, horseID
func (_m *PregnancyRepository) InitializePreFoalingChecklist(ctx context.Context, horseID uint) error {
	ret := _m.Called(ctx, horseID)

	if len(ret) == 0 {
		panic("no return value specified for InitializePreFoalingChecklist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, horseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, pregnancy
func (_m *PregnancyRepository) Update(ctx context.Context, pregnancy *models.Pregnancy) error {
	ret := _m.Called(ctx, pregnancy)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Pregnancy) error); ok {
		r0 = rf(ctx, pregnancy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePreFoalingChecklistItem provides a mock function with given fields: ctx, item
func (_m *PregnancyRepository) UpdatePreFoalingChecklistItem(ctx context.Context, item *models.PreFoalingChecklistItem) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePreFoalingChecklistItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PreFoalingChecklistItem) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePregnancyStatus provides a mock function with given fields: ctx, horseID, isPregnant, conceptionDate
func (_m *PregnancyRepository) UpdatePregnancyStatus(ctx context.Context, horseID uint, isPregnant bool, conceptionDate *time.Time) error {
	ret := _m.Called(ctx, horseID, isPregnant, conceptionDate)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePregnancyStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, bool, *time.Time) error); ok {
		r0 = rf(ctx, horseID, isPregnant, conceptionDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPregnancyRepository creates a new instance of PregnancyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPregnancyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PregnancyRepository {
	mock := &PregnancyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
